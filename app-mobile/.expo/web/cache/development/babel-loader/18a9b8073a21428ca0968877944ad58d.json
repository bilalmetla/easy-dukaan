{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var get = function get(path) {\n  var response;\n  return _regeneratorRuntime.async(function get$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (path.charAt(0) == '/') {\n            path = path.substring(1);\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(url + \"/\" + path));\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 6:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var post = function post(path, data) {\n  var requestOptions, response;\n  return _regeneratorRuntime.async(function post$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          requestOptions = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n          };\n\n          if (path.charAt(0) == '/') {\n            path = path.substring(1);\n          }\n\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(fetch(url + \"/\" + path, requestOptions));\n\n        case 4:\n          response = _context2.sent;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/m.bilal/Documents/code/easy-dukaan-app/src/services/http.js"],"names":["get","path","charAt","substring","fetch","url","response","json","post","data","requestOptions","method","headers","body","JSON","stringify"],"mappings":";AAIA,OAAO,IAAMA,GAAG,GAAG,SAANA,GAAM,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACf,cAAIA,IAAI,CAACC,MAAL,CAAY,CAAZ,KAAkB,GAAtB,EAA2B;AACvBD,YAAAA,IAAI,GAAGA,IAAI,CAACE,SAAL,CAAe,CAAf,CAAP;AACH;;AAHc;AAAA,2CAKQC,KAAK,CAAIC,GAAJ,SAAWJ,IAAX,CALb;;AAAA;AAKTK,UAAAA,QALS;AAAA;AAAA,2CAMFA,QAAQ,CAACC,IAAT,EANE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAZ;AAUP,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAOP,IAAP,EAAaQ,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,UAAAA,cADU,GACO;AACnBC,YAAAA,MAAM,EAAE,MADW;AAEnBC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aAFU;AAGnBC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAHa,WADP;;AAMhB,cAAIR,IAAI,CAACC,MAAL,CAAY,CAAZ,KAAkB,GAAtB,EAA2B;AACvBD,YAAAA,IAAI,GAAGA,IAAI,CAACE,SAAL,CAAe,CAAf,CAAP;AACH;;AARe;AAAA,2CASOC,KAAK,CAAIC,GAAJ,SAAWJ,IAAX,EAAmBS,cAAnB,CATZ;;AAAA;AASVJ,UAAAA,QATU;AAAA;AAAA,2CAUHA,QAAQ,CAACC,IAAT,EAVG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAb","sourcesContent":["\r\n\r\n\r\n\r\nexport const get = async (path) => {\r\n    if (path.charAt(0) == '/') {\r\n        path = path.substring(1)\r\n    }\r\n    \r\n    const response = await fetch(`${url}/${path}`);\r\n    return await response.json();\r\n};\r\n\r\n\r\nexport const post = async (path, data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n    if (path.charAt(0) == '/') {\r\n        path = path.substring(1)\r\n    }\r\n    const response = await fetch(`${url}/${path}`, requestOptions);\r\n    return await response.json();\r\n}"]},"metadata":{},"sourceType":"module"}